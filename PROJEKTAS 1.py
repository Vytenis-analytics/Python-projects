# -*- coding: utf-8 -*-
"""Vytenis Stanislovėnas - PROJEKTAS.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r6m__kT7cJJYLcTaKqMv2o7VRqErFbnE

# Libraries
"""

import matplotlib.pyplot as plt
import pandas as pd
import math as ma

"""# Data import / management"""

energy = pd.read_excel('Energy.xlsx')
energy

HDI = pd.read_excel('Human Development Index.xlsx')
HDI

internet = pd.read_excel('Internet.xlsx')
internet

energy.info()
print(" ")
HDI.info()
print(" ")
internet.info() ## duomenys sutvarkyti su PowerBI, nenoriu nieko juose keisti, nes paskui gali nepavykti atlikti skaičiavimų

"""# Simple calculations (maximum, minimum values, averages)


"""

H = HDI['HDI'].max()
l_1 = HDI['Year'].min()
l_2 = HDI['Year'].max()

print(f"The highest recorded value of the Human Social Development Index has been recorded in {l_1} - {l_2} period was {H}")

H = round(HDI['HDI'].mean(), 2)
l_1 = HDI['Year'].min()
l_2 = HDI['Year'].max()

print(f"The average recorded value of the Human Social Development Index is recorded in {l_1} - {l_2} period was {H}")

H = round(HDI['HDI'].min(), 2)
l_1 = HDI['Year'].min()
l_2 = HDI['Year'].max()

print(f"The lowest recorded value of the Human Social Development Index was recorded in {l_1} - {l_2} period was {H}")

h = round(HDI.loc[HDI['Country'] == 'Lithuania']['HDI'].mean(), 2)
h_m = round(HDI.loc[HDI['Country'] == 'Lithuania']['HDI female'].mean(), 2)
h_v = round(HDI.loc[HDI['Country'] == 'Lithuania']['HDI male'].mean(), 2)
l_1 = round(HDI.loc[HDI['Country'] == 'Lithuania']['Year'].min(), 2)
l_2 = round(HDI.loc[HDI['Country'] == 'Lithuania']['Year'].max(), 2)

if h_m > h_v:
 diff = round(h_m - h_v, 2)
else:
 diff = round(h_v - h_m, 2)


print(f" The average value of the Human Social Development Index recorded in Lithuania in {l_1} - {l_2} period was {h} \n the average value of this indicator among women was - {h_m}, among men - {h_v}. \
The difference on average  was {diff}")

h = round(HDI.loc[HDI['Country'] == 'Lithuania']['Life Expectancy at Birth'].mean(), 2)
m = round(HDI.loc[HDI['Country'] == 'Lithuania']['Expected Years of Schooling'].mean(), 2)
rm = round(HDI.loc[HDI['Country'] == 'Lithuania']['Mean Years of Schooling'].mean(), 2)
l_1 = round(HDI.loc[HDI['Country'] == 'Lithuania']['Year'].min(), 2)
l_2 = round(HDI.loc[HDI['Country'] == 'Lithuania']['Year'].max(), 2)


print(f" Average expected life expectancy in Lithuania in {l_1} - {l_2} period was {h} years. \n The average expected duration of study was {m} years, the actual duration of the study was {rm} years.")

round(HDI.groupby('Development level')['HDI'].agg(['min', 'max', 'mean']), 2)

HDI_filtered = HDI[HDI['Year'] == 2000]
result = HDI_filtered.groupby('Development level').size().sort_values(ascending=False)
result

"""# Top 10 countries according to various indicators"""

HDI_filtered = HDI[HDI['Year'] == 2020]
top_pagal_hdi = HDI_filtered.sort_values(by='HDI', ascending=False).head(10)
top10hdi = top_pagal_hdi[['ISO3', 'Country', 'HDI']].reset_index(drop=True)
top10hdi['Place'] = top10hdi.index + 1
top10hdi = top10hdi[['Place','ISO3', 'Country', 'HDI']]
top10hdi

fig, ax = plt.subplots()
bars = plt.barh(top10hdi.Country, top10hdi.HDI)

stulpeliai = ax.barh(top10hdi.Country, top10hdi.HDI)

stulpeliai[0].set_color('red')
stulpeliai[1].set_color('blue')
stulpeliai[2].set_color('green')
stulpeliai[3].set_color('purple')
stulpeliai[4].set_color('orange')
stulpeliai[5].set_color('black')
stulpeliai[6].set_color('brown')
stulpeliai[7].set_color('yellow')
stulpeliai[8].set_color('red')

ax.set(title='Top 10 countries according to the human social development index - year 2020')
plt.ylabel('Country')
plt.xlabel('Index value')
for bar in bars:
    width = bar.get_width()
    label_text = f'{width:,.3f}'
    ax.text(width, bar.get_y() + bar.get_height() / 2, label_text, ha='left', va='center')

plt.xlim(0.8, 1)

plt.show()

internet_filtered = internet[internet['Year'] == 2015]
top_pagal_Internet = internet_filtered.sort_values(by='Have internet', ascending=False).head(10).round(2)
top10int = top_pagal_Internet[['Code', 'Country', 'Have internet']].reset_index(drop=True)

top10int['Have internet'] = top10int['Have internet'].apply('{0:.2f}'.format)
top10int['Place'] = top10int.index + 1

top10int = top10int[['Place','Code', 'Country', 'Have internet']]

top10int = top10int.style.set_caption("Top 10 countries according to internet usage, year 2015")

top10int

energyp_filtered = energy[energy['Year'] == 2015]

top_pagal_energyp = energyp_filtered.round(2)

top10ep = top_pagal_energyp.groupby('Country')['Energy_consumption'].sum().sort_values(ascending=False).head(10).reset_index()
top10epRevserse = top10ep.sort_values(by='Energy_consumption', ascending=False)

top10ep['Energy_consumption'] = top10ep['Energy_consumption'].apply('{0:.2f}'.format)

top10ep['Place'] = top10ep.index + 1

top10ep = top10ep[['Place', 'Country', 'Energy_consumption']]

top10ep = top10ep.style.set_caption("Top 10 countries according to energy consumption - year 2015")

top10ep

top10epRevserse

# top10ep = top10ep.data

fig, ax = plt.subplots()

stulpeliai = ax.bar(top10epRevserse['Country'], top10epRevserse['Energy_consumption'],
color=['#ffbf44', '#5a3a67', '#d372ae', '#a7cf3f', '#cf603f'])


stulpeliai[0].set_hatch('/')
stulpeliai[1].set_hatch('O')
stulpeliai[2].set_hatch('*')
stulpeliai[3].set_hatch('|')
stulpeliai[4].set_hatch('-')
stulpeliai[5].set_hatch('*')
stulpeliai[6].set_hatch('+')
stulpeliai[7].set_hatch('-')
stulpeliai[8].set_hatch('*')
stulpeliai[9].set_hatch('O')

plt.bar_label(stulpeliai, fmt='%.1f')
ax.set(title='Top 10 countries according to energy consumption - year 2015')



plt.xticks(rotation=45, ha='right')
plt.ylabel('Amount of energy used')

plt.show()

energyp_filtered = energy[energy['Year'] == 2015]

top10_energy = top_pagal_energyp.groupby('Country')['Energy_consumption'].sum().sort_values(ascending=False).head(10)

total_energy_consumption_10 = top10_energy.sum().round(2)

total_energy_consumption_all = energyp_filtered['Energy_consumption'].sum().round(2)

r_total_energy_consumption = total_energy_consumption_all - total_energy_consumption_10

r_total_energy_consumption.round(2)

print(f" The amount of energy consumed by Top 10 countries - {total_energy_consumption_10}, the amount of energy consumed by the rest of the countries - {r_total_energy_consumption} ")

plt.pie([r_total_energy_consumption, total_energy_consumption_10], labels=['The rest of the world', 'Top 10 countries'], explode=[0.1, 0], autopct='%.2f %%')

plt.title('Distribution of countries according to the amount of energy consumed - year 2015', pad=24)


plt.tight_layout()
plt.axis('equal')

plt.show()

"""# The 5 worst countries according to various indicators

"""

HDI_filtered = HDI[HDI['Year'] == 2020]
w_pagal_hdi = HDI_filtered.sort_values(by='HDI', ascending=True).head(5)
w5_hdi = w_pagal_hdi[['ISO3', 'Country', 'HDI']].reset_index(drop=True)

w5_hdi['HDI'] = w5_hdi['HDI'].apply('{0:.3f}'.format)

w5_hdi = w5_hdi[['ISO3', 'Country', 'HDI']]

w5_hdif = w5_hdi.style.set_caption("5 Countries with the worst human development index (year - 2020)")

w5_hdif

HDI_filtered = HDI[HDI['Year'] == 2020]
w_pagal_hdi = HDI_filtered.sort_values(by='HDI female', ascending=True).head(5)
w5_hdi_w = w_pagal_hdi[['ISO3', 'Country', 'HDI female']].reset_index(drop=True)

w5_hdi_w['HDI female'] = w5_hdi_w['HDI female'].apply('{0:.3f}'.format)

w5_hdi_w = w5_hdi_w[['ISO3', 'Country', 'HDI female']]

w5_hdif_w = w5_hdi_w.style.set_caption("5 Countries with the worst human development index for woman (year - 2020)")

w5_hdif_w

HDI_filtered = HDI[HDI['Year'] == 2020]
w_pagal_hdi = HDI_filtered.sort_values(by='HDI male', ascending=True).head(5)
w5_hdi_m = w_pagal_hdi[['ISO3', 'Country', 'HDI male']].reset_index(drop=True)

w5_hdi_m['HDI male'] = w5_hdi_m['HDI male'].apply('{0:.3f}'.format)

w5_hdi_m = w5_hdi_m[['ISO3', 'Country', 'HDI male']]

w5_hdif_m = w5_hdi_m.style.set_caption("5 Countries with the worst human development index for man (year - 2020)")

w5_hdif_m

#kodas stulpelinei diagramai

HDI_males_worst_countries = HDI.loc[ (HDI['Country'].isin(w5_hdi['Country'])) & (HDI['Year'] == 2020) & (HDI['HDI male'].isnull() == False) ][['Country', 'HDI male']]
HDI_females_worst_countries = HDI.loc[ (HDI['Country'].isin(w5_hdi['Country'])) & (HDI['Year'] == 2020) & (HDI['HDI female'].isnull() == False) ][['Country', 'HDI female']]

fig, ax = plt.subplots()

merged_hdi = pd.merge(HDI_males_worst_countries, HDI_females_worst_countries, on='Country', how='outer')

width = 0.35
x = range(len(merged_hdi['Country']))

stulpeliai1 = ax.bar(x, merged_hdi['HDI male'], width, label='HDI male', color='#ffbf44')
stulpeliai2 = ax.bar([i + width for i in x], merged_hdi['HDI female'], width, label='HDI female', color='#5a3a67')

ax.set_xticks([i + width / 2 for i in x])
ax.set_xticklabels(merged_hdi['Country'], rotation=45, ha='right')

plt.bar_label(stulpeliai1, fmt='%.3f')
plt.bar_label(stulpeliai2, fmt='%.3f')
ax.set(title='The worst countries acording Human developmen index')

plt.ylabel('HDI index')

plt.ylim(0, 0.6)
plt.legend()
plt.show()

"""# Information of the 10 countries with the largest population

"""

# energy_filtered = energy[energy['Year'] == 2015]
# energy_filtered.loc[ energy_filtered['Country'] == 'China' ]
# pop = energy_filtered.groupby('Country')['Population'].first()

energy_filtered = energy[energy['Year'] == 2015]
pop = energy_filtered.groupby('Country')['Population'].first().sort_values(ascending=False).head(10)

pop1 = pop.apply('{0:.0f}'.format)

pop2 = pd.DataFrame(pop1).style.set_caption("10 Countries with the biggest population in thousands (year - 2015)")

pop2

fig, ax = plt.subplots()

stulpeliai = ax.bar(pop.index, pop.values,
color=['#ffbf44', '#5a3a67', '#d372ae', '#a7cf3f', '#cf603f'])


stulpeliai[0].set_hatch('/')
stulpeliai[1].set_hatch('O')
stulpeliai[2].set_hatch('*')
stulpeliai[3].set_hatch('|')
stulpeliai[4].set_hatch('-')
stulpeliai[5].set_hatch('*')
stulpeliai[6].set_hatch('+')
stulpeliai[7].set_hatch('-')
stulpeliai[8].set_hatch('*')
stulpeliai[9].set_hatch('O')


ax.set(title='Top 10 countries with the biggest population - year 2015')



plt.xticks(rotation=45, ha='right')
plt.ylabel('Population in billions')

plt.show()

pop1.index

gdp_1 = energy_filtered.loc[energy_filtered['Country'].isin(pop1.index)]
gdp_2 = gdp_1.groupby('Country')['GDP'].first().sort_values(ascending=False).head(10)
gdp_3 = gdp_2.apply('{0:.2f}'.format)
gdp_4 = pd.DataFrame(gdp_3).style.set_caption("Countries with the biggest population - GDP (bil) (year - 2015)")
gdp_4

fig, ax = plt.subplots()

stulpeliai = ax.bar(gdp_2.index, gdp_2.values)


stulpeliai[0].set_color('red')
stulpeliai[1].set_color('blue')
stulpeliai[2].set_color('orange')
stulpeliai[3].set_color('black')
stulpeliai[4].set_color('green')
stulpeliai[5].set_color('pink')
stulpeliai[6].set_color('purple')
stulpeliai[7].set_color('brown')
stulpeliai[8].set_color('silver')
stulpeliai[9].set_color('yellow')

plt.bar_label(stulpeliai, fmt='%.0f')
ax.set(title="Countries with the biggest population (GDP)" )



plt.xticks(rotation=60, ha='right')
plt.ylabel('GDP in billion $')

plt.show()

pol_1 = energy_filtered.loc[energy_filtered['Country'].isin(pop1.index)]
pol_2 = pol_1.groupby('Country')['CO2_emission'].first().sort_values(ascending=False).head(10).reset_index()
pol_3 = pol_2.loc[ pol_2['CO2_emission'] != 0 ]
pol_4 = pol_3
pol_3 = pol_3.sort_values(by='CO2_emission', ascending=False)
pol_4['CO2_emission'] = pol_4['CO2_emission'].apply('{0:.2f}'.format)
pol_5 = pd.DataFrame(pol_4).style.set_caption("Countries with the biggest population (CO2_emission)")
pol_5

fig, ax = plt.subplots() ## neveikia normaliai

stulpeliai = ax.bar(pol_3['Country'], pol_3['CO2_emission'])


stulpeliai[0].set_color('red')
stulpeliai[1].set_color('blue')
stulpeliai[2].set_color('orange')
stulpeliai[3].set_color('black')
stulpeliai[4].set_color('green')
stulpeliai[5].set_color('pink')
stulpeliai[6].set_color('purple')

plt.bar_label(stulpeliai, fmt='%.0f')
ax.set(title="Countries with the biggest population (CO2_emission)" )



plt.xticks(rotation=60, ha='right')
plt.ylabel('CO2_emission')

plt.show()

"""#Countries Categories"""

internet_filtered = internet.loc[internet['Country'].isin(pop1.index)]
internet_filtered = internet_filtered.loc[internet_filtered['Year'] == 2015]
internet_filtered[['Country', 'Have internet']].sort_values(by='Have internet', ascending=False).round(2).reset_index(drop=True)

def internet_u(eilute):
    if eilute['Have internet'] < 20:
        return 'Low internet usage'
    elif eilute['Have internet'] <= 50:
        return 'Medium internet usage'
    elif eilute['Have internet'] < 75:
        return 'High internet usage'
    elif eilute['Have internet'] >= 75:
        return 'Very high internet usage'
    else:
        return ''

internet['internet usage'] = internet.apply(internet_u, axis=1)
internet_filtered_1 = internet_filtered[['Country', 'Have internet', 'internet usage']].sort_values(by='Have internet', ascending=False).round(2)
internet_filtered_1 = internet_filtered_1.reset_index(drop=True)
internet_filtered_2 = internet_filtered_1.style.set_caption("Countries with the biggest population - internet usage (year - 2015)")
internet_filtered_2

internet_filteredd = internet.loc[internet['Year'] == 2015]
internet_group = internet_filteredd.groupby('internet usage')['Country'].count()
internet_group_df = pd.DataFrame(internet_group).reset_index()
internet_group_2 = internet_group_df.style.set_caption("Countries - internet usage (year - 2015)")
internet_group_2

internet_r = dict(internet_filteredd.groupby('internet usage').count()['Country'])
internet_r

internet_r_pav = internet_r.keys()
internet_r_reiksmes = internet_r.values()

plt.pie(internet_r_reiksmes, labels=internet_r_pav, autopct='%.2f %%')
plt.title('Countries by internet usage - year 2015', pad=24)

plt.show()

def hdi_u(eilute):
    if eilute['Gross National Income Per Capita'] < 10000:
        return 'Low income'
    elif eilute['Gross National Income Per Capita'] <= 30000:
        return 'Medium income'
    elif eilute['Gross National Income Per Capita'] < 50000:
        return 'High income'
    elif eilute['Gross National Income Per Capita'] >= 50000:
        return 'Very high income'
    else:
        return ''

HDI['Income_range'] = HDI.apply(hdi_u, axis=1)
HDI_filteredd = HDI.loc[HDI['Year'] == 2015]
HDI_filteredd1 = HDI_filteredd.dropna(subset=['Gross National Income Per Capita'])
HDI_filteredd_2 = HDI_filteredd1.groupby('Income_range')['Country'].count()

HDI_filteredd_2

Income_range = dict(HDI_filteredd1.groupby('Income_range').count()['Country'])
Income_range

HDI_r_pav = Income_range.keys()
HDI_r_reiksmes = Income_range.values()

plt.pie(HDI_r_reiksmes, labels=HDI_r_pav, autopct='%.2f %%')
plt.title('Countries by income - year 2015', pad=24)

plt.show()

"""# Final conclusions

This project shows lots of interesting data of world countries, and also shows my python skills
"""